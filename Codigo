import pandas as pd
import os

class AlmacenarResultados:
    def __init__(self):
        self.mejor_auge = []
        self.mejor_estabilidad = []
        self.mejoras_significativas = []

    def procesar_dataframe(self, df):
        precio_inicial = df["close"].iloc[0]
        precio_final = df["close"].iloc[-1]
        cambio = self.calcular_cambio(precio_inicial, precio_final)
        desviacion_estandar = self.calcular_desviacion_estandar(df["close"])

        self.mejor_auge.append({"nombre": df["nombre"].iloc[0], "cambio": cambio})
        self.mejor_estabilidad.append({"nombre": df["nombre"].iloc[0], "desviacion_estandar": desviacion_estandar})

        mejora_significativa = False
        descripcion = ""
        if cambio > 100 or (df["market_cap"].iloc[-1] - df["market_cap"].iloc[0]) > 100000000:
            mejora_significativa = True
            if cambio > 100:
                descripcion += "Aumento del precio del " + str(round(cambio, 2)) + "%."
            if (df["market_cap"].iloc[-1] - df["market_cap"].iloc[0]) > 100000000:
                if descripcion != "": descripcion += " Y "
                descripcion += "Aumento de la capitalizaci√≥n de mercado en $" + str(round((df["market_cap"].iloc[-1] - df["market_cap"].iloc[0]) / 1000000, 2)) + " millones."

        if mejora_significativa:
            self.mejoras_significativas.append({"nombre": df["nombre"].iloc[0], "mejora": descripcion})

        self.mejor_auge.sort(key=lambda x: x["cambio"], reverse=True)
        self.mejor_estabilidad.sort(key=lambda x: x["desviacion_estandar"])

        return self.mejor_auge, self.mejor_estabilidad, self.mejoras_significativas

    def calcular_cambio(self, precio_inicial, precio_final):
        return ((precio_final - precio_inicial) / precio_inicial) * 100

    def calcular_desviacion_estandar(self, precios):
        return precios.std()

class ExtraccionCSV:
    def __init__(self, csv_file):
        self.csv_file = csv_file

    def obtener_dataframe(self):
        try:
            if os.path.exists(self.csv_file):
                df = pd.read_csv(self.csv_file)
                df['nombre'] = os.path.splitext(os.path.basename(self.csv_file))[0]
                return df
            else:
                print("Archivo CSV no encontrado:", self.csv_file)
                return None
        except Exception as e:
            print("Error al leer el archivo CSV:", e)
            return None

# Ruta del archivo CSV que contiene los datos de las criptomonedas
csv_file_path = "/path/to/crypto_data.csv"

if __name__ == "__main__":
    extractor = ExtraccionCSV(csv_file_path)
    data = extractor.obtener_dataframe()

    if data is not None:
        almacen = AlmacenarResultados()
        mejor_auge, mejor_estabilidad, mejoras_significativas = almacen.procesar_dataframe(data)

        print("Mejor Auge:", mejor_auge)
        print("Mejor Estabilidad:", mejor_estabilidad)
        print("Mejoras Significativas:", mejoras_significativas)

